package application;

import application.mill.Controller.MainController;
import application.mill.Controller.MainController.DrawingProcessor;
import application.mill.Interfaces.GameException;
import application.mill.Interfaces.Token;
import application.mill.Model.Buffer;
import application.mill.Model.GameField;

import com.kuka.common.ThreadUtil;
import com.kuka.roboticsAPI.applicationModel.RoboticsAPIApplication;

import static com.kuka.roboticsAPI.motionModel.BasicMotions.*;

import com.kuka.roboticsAPI.conditionModel.ForceCondition;
import com.kuka.roboticsAPI.conditionModel.ICondition;
import com.kuka.roboticsAPI.controllerModel.Controller;
import com.kuka.roboticsAPI.controllerModel.sunrise.conditions.SunriseConditionObserver;
import com.kuka.roboticsAPI.deviceModel.LBR;
import com.kuka.roboticsAPI.deviceModel.OperationMode;
import com.kuka.roboticsAPI.executionModel.IFiredConditionInfo;
import com.kuka.roboticsAPI.geometricModel.Frame;
import com.kuka.roboticsAPI.geometricModel.ObjectFrame;
import com.kuka.roboticsAPI.geometricModel.Tool;
import com.kuka.roboticsAPI.geometricModel.math.CoordinateAxis;
import com.kuka.roboticsAPI.geometricModel.math.Matrix;
import com.kuka.roboticsAPI.geometricModel.math.Vector;
import com.kuka.roboticsAPI.motionModel.IMotionContainer;
import com.kuka.roboticsAPI.sensorModel.ForceSensorData;
import com.kuka.roboticsAPI.uiModel.ApplicationDialogType;

import de.fh_kiel.cimtt.robotik.Board;
import de.fh_kiel.cimtt.robotik.Gripper;
import de.fh_kiel.cimtt.robotik.Movements;


public class TestApplication extends RoboticsAPIApplication{
	private Controller controller;
	private LBR lbr;
	private Tool tool;
	Frame Pts1, Pts2, Pts3;
	Gripper gripper;
	Vector n;
	Board myBoard;
	int game;
	double velocity = 0.4;
	Movements Move;
	static boolean t = true;
	// boolean exit;
	
	
	public void initialize() {
		controller = getController("KUKA_Sunrise_Cabinet_1");
		lbr = (LBR) getRobot(controller,
				"LBR_iiwa_7_R800_1");
		tool = getApplicationData().createFromTemplate("Greifer");
		tool.attachTo(lbr.getFlange());
		
		
	}

	public void run() {
		
		/** We can move faster, if operation mode is T1*/
        if (OperationMode.T1 == lbr.getOperationMode())
        {
        	velocity = 1;
        }
        
		/** Go to waiting position */
		gripper = new Gripper(controller, tool);
		
		//lbr.move(ptp(getApplicationData().getFrame("/HOME")).setJointVelocityRel(velocity));
		
		/** Choose the game */
				game = getApplicationUI().displayModalDialog(
						ApplicationDialogType.QUESTION, "What game do you want to play ?", 
							"1 : Draughts", 
							"2 : Nine Men's Morris",
							"exit the program");
		if (game == 2) return;
		Object foo = new Object();
		//t = false;
		/**  create movements*/
		Move = new Movements(getApplicationUI(), lbr, tool, game, gripper);
		Init();
		
		//Move.LbrPtp(getApplicationData().getFrame("/HOME"), velocity);
		
		/** Calcul de la normale au plateau */
		calculateNormal();
		int I = 0;
		int J = 0;
		
		myBoard = new Board(Pts1, Pts2, Pts3);
		
		Buffer<Integer[]> inputBuffer = new Buffer<Integer[]>();
		
		MainController gc = new MainController(foo,inputBuffer, getApplicationUI(), Move, myBoard);
		int i = 0;
		gc.startGame();
		inputBuffer.write(new Integer[]{1, 1});
		//ThreadUtil.milliSleep(1000);
		GameField field1 = new GameField();
		GameField field2 = new GameField();
		
		Integer[] lastTokenAdd = new Integer[]{0, 0};
		Integer[] lastTokenRemove = new Integer[]{0, 0};
		synchronized(foo){
			
			while(i<10){
				
				t = true;
			    foo.notify();
				//DrawingProcessor o;
				System.out.println("robot sees : " + gc.getDrawingProcessor().getAIT());
				
				while (! gc.getDrawingProcessor().getAIT()){
					// wait 
					try {
						System.out.println("Robot wait");
						foo.wait();
					} catch (InterruptedException e) {
						// TODO Automatisch generierter Erfassungsblock
						e.printStackTrace();
					}
				}
				System.out.println("Robot run");
				
				// Perform robot move
				
				field1 = gc.getDrawingProcessor().getField().getCopy();
				lastTokenAdd[0] = -1;
				lastTokenRemove[0] = -1;
				System.out.println("OK");
				for (int x=0; x<field1.getWidth(); x++){
					for (int y=0; y<field1.getHeight(); y++){
						if ( (field1.getToken(x, y) != field2.getToken(x, y)) && (field1.getToken(x, y) == (Token.BLACK))){
							System.out.println("OK1");
							lastTokenAdd[0] = x;
							lastTokenAdd[1] = y;
							//System.out.println("OK2");
						}
						
						if ( (field1.getToken(x, y) != (field2.getToken(x, y))) && (field2.getToken(x, y) == (Token.BLACK)) && (field1.getToken(x, y) == (Token.EMPTY))){
							System.out.println("OK3");
							lastTokenRemove[0] = x;
							lastTokenRemove[1] = y;
							
							//System.out.println("OK4");
						}
					}
				}
				System.out.println("OK5");
				
				System.out.println("TokenAdd : " + lastTokenAdd[0] +" " + lastTokenAdd[1]);
				
				System.out.println("TokenRemove : " + lastTokenRemove[0] +" " + lastTokenRemove[1]);
				System.out.println("OK6");
				
				field2 = new GameField(field1);
				
				Move.move(field2, myBoard);
				System.out.println("OK7");
				
				
				
				//get human player move
				I = getApplicationUI().displayModalDialog(
						ApplicationDialogType.QUESTION, "Where did you play (on axe X)?", 
							"0", 
							"1",
							"2",
							"3",
							"4",
							"5",
							"6",
							"exit program");
				
				if (I == 7){
					t = false;
					return;
				}
				
				J = getApplicationUI().displayModalDialog(
						ApplicationDialogType.QUESTION, "Where did you play (on axe Y)?", 
							"0", 
							"1",
							"2",
							"3",
							"4",
							"5",
							"6");
				
				
				//write buffer
				inputBuffer.clear();
				inputBuffer.write(new Integer[]{I,J});
				
				// unblock AI
				t = false;
			    i++;
			}
		}
		
		
		
		/*
		/** Play 
		final int cancelApplication = 5;
		
		
		/** Take 
		boolean t = false;
		while(ImpParam != cancelApplication){
			while (t == false){
				ImpParam = getApplicationUI().displayModalDialog(
						ApplicationDialogType.QUESTION, "Where did you play?", 
							"1 : NE2", 
							"2 : N3",
							"3 : SE1",
							"4 : SW2",
							"5 : W1",
							"exit the program");
				switch (ImpParam) {
				
				case 0 :
					t = Move.take(4, myBoard);
					break;
					
				case 1 :
					t = Move.take(2, myBoard);
					break;
					
				case 2 :
					t = Move.take(9, myBoard);
					break;
					
				case 3 :
					t = Move.take(16, myBoard);
					break;
					
				case 4 :
					t = Move.take(18, myBoard);
					break;
					
				default :
					Move.LbrPtp(getApplicationData().getFrame("/HOME"), velocity);
					return ;
					
				}// end switch
			} // end while (t == false)
		
		/** Place 
		ImpParam = 0;
		t = false;
			while (t == false){
				ImpParam = getApplicationUI().displayModalDialog(
						ApplicationDialogType.QUESTION, "Where do you want to place this piece?", 
							"1 : NE2", 
							"2 : N3",
							"3 : SE1",
							"4 : SW2",
							"5 : W1",
							"exit the program");
				switch (ImpParam) {
				
				case 0 :
					t = Move.place(4, myBoard);
					break;
					
				case 1 :
					t = Move.place(2, myBoard);
					break;
					
				case 2 :
					t = Move.place(9, myBoard);
					break;
					
				case 3 :
					t = Move.place(16, myBoard);
					break;
					
				case 4 :
					t = Move.place(18, myBoard);
					break;
					
				default :
					t = Move.place(24, myBoard);
					
					Move.LbrPtp(getApplicationData().getFrame("/HOME"), velocity);
					return ;
					
				}// end switch
			} // end while (t == false)
			t = false;
		} // end while (ImpParam != cancelApplication)
		
		/*
		for (int i=0 ; i<myBoard.ListePts.size() ; i++){
			lbr.move(lin((myBoard.ListePts.get(i))).setJointVelocityRel(0.3*velocity));
			System.out.println("point = " + myBoard.ListePts.get(i));
		}
		
		
		// return to waiting position
		Move.LbrPtp(getApplicationData().getFrame("/HOME"), velocity);*/
	}
	
	public static boolean getT(){
		return t;
	}
	
	public void Init(){
				
		Frame tmp = new Frame(0,0,0,0,0,0);
		
		Move.LbrPtp(getApplicationData().getFrame("/NE3"), 0.8*velocity);
		tmp = getApplicationData().getFrame("/NE3").copy();
		tmp.setZ(tmp.getZ()-300);
		Pts2 = Move.ToolLinTouch(tmp, 0.5*velocity);
		System.out.println("Pts2 = "+ Pts2);
		Pts2 = copyXY(Pts2, getApplicationData().getFrame("/NE3"));
		lbr.move(ptp(getApplicationData().getFrame("/NE3")).setJointVelocityRel(0.6*velocity));
		
		//
		Move.LbrLin(getApplicationData().getFrame("/SE3"), 0.6*velocity);
		tmp = getApplicationData().getFrame("/SE3").copy();
		tmp.setZ(tmp.getZ()-300);
		Pts3 = Move.ToolLinTouch(tmp, 0.5*velocity);
		Pts3 = copyXY(Pts3, getApplicationData().getFrame("/SE3"));
		lbr.move(ptp(getApplicationData().getFrame("/SE3")).setJointVelocityRel(0.6*velocity));
		
		//
		Move.LbrLin(getApplicationData().getFrame("/NW3"), 0.6*velocity);
		tmp = getApplicationData().getFrame("/NW3").copy();
		tmp.setZ(tmp.getZ()-300);
		Pts1 = Move.ToolLinTouch(tmp, 0.5*velocity);
		Pts1 = copyXY(Pts1, getApplicationData().getFrame("/NW3"));
		lbr.move(ptp(getApplicationData().getFrame("/NW3")).setJointVelocityRel(0.6*velocity));
		
		
		
	}
	
	public double[] movePerpendicular(int i){
		
		double m = 0;
		double[] Angle = new double[3];
		Vector d;
		
		if (i == 1){// East
			d = Vector.of(Pts2.getX() - Pts3.getX(), Pts2.getY() - Pts3.getY(), Pts2.getZ() - Pts3.getZ()).normalize();
		}
		else {// Nord
			d = Vector.of(Pts1.getX() - Pts2.getX(), Pts1.getY() - Pts2.getY(), Pts1.getZ() - Pts2.getZ()).normalize();
		}
		
		System.out.println("i = " +i);
		System.out.println("d = " +d);
		System.out.println("n = " +n);
		
		//if (d.getZ() < 0) m = Math.PI/2;
		Angle[0] = m - Math.atan2(d.getY(),d.getZ()) ;
		m = 0;
		
		//if (d.getZ() < 0) m = Math.PI/2;
		Angle[1] = m - Math.atan2(d.getZ(),d.getX());
		m = 0;

		//if (d.getX() < 0) m = Math.PI/2;
		Angle[2] = m - Math.atan2(d.getX(),d.getY());
		m = 0;
		
		//if (i == 0) m = Math.PI/2;
		//Angle[0] = Angle[0] - Math.atan2(n.getY(),n.getZ()) + Math.PI/2;
		
		for (int l=0; l<3; l++){
			System.out.println("Angle[" +l+ "] = " +Angle[l]);
		}
		
		return Angle;
		//tool.getDefaultMotionFrame().move(linRel(0,0,0,C,B,A).setJointVelocityRel(0.2));
	}
	
	public void calculateNormal(){
		Vector ones = Vector.of(-100, -100, -100);
		
		Vector VecX = Vector.of(Pts1.getX(), Pts2.getX(), Pts3.getX());
		Vector VecY = Vector.of(Pts1.getY(), Pts2.getY(), Pts3.getY());
		Vector VecZ = Vector.of(Pts1.getZ(), Pts2.getZ(), Pts3.getZ());
		
		
		Matrix M = Matrix.ofColumns(VecX, VecY, VecZ);
		n = M.invert().multiply(ones).normalize();
		System.out.println("n = " +n);
		
	}

	public Frame copyXY(Frame P1, ObjectFrame objectFrame){
		
		Frame P = new Frame(0,0,0,0,0,0);
		
		P.setX(objectFrame.getX());
		P.setY(objectFrame.getY());
		P.setZ(P1.getZ());
		P.setAlphaRad(objectFrame.getAlphaRad());
		P.setBetaRad(objectFrame.getBetaRad());
		P.setGammaRad(objectFrame.getGammaRad());
		
		return P;
	}
	
	/**
	 * Auto-generated method stub. Do not modify the contents of this method.
	 */
	public static void main(String[] args) {
		TestApplication app = new TestApplication();
		app.runApplication();
	}
}
